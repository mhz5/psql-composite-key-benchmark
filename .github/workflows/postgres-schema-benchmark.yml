name: Postgres Schema Benchmark

on:
  push:
    branches: main

jobs:
  benchmark:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do sleep 1; done

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Run performance test
        run: |
          PSQL="psql -h localhost -U test -d testdb -w"
          export PGPASSWORD=test

          echo "Creating schemas..."
          $PSQL <<SQL
          DROP TABLE IF EXISTS schema1;
          DROP TABLE IF EXISTS schema2;

          CREATE TABLE schema1 (
            topic_id TEXT,
            shard_id INT,
            message_id INT,
            content TEXT,
            PRIMARY KEY (topic_id, shard_id, message_id)
          );

          CREATE TABLE schema2 (
            topic_id TEXT,
            message_id INT,
            shard_id INT,
            content TEXT,
            PRIMARY KEY (topic_id, message_id)
          );

          CREATE INDEX idx_schema2_shard ON schema2(shard_id);
          SQL

          echo "Populating tables..."
          # Common configuration
          NUM_TOPICS=300
          NUM_SHARDS=10
          NUM_MESSAGES=100
          MSG_ID_RANGE=100000
          
          declare -a tuples=()
          
          echo "Generating all (topic_id, shard_id, message_id) tuples..."
          for topic in $(seq 1 $NUM_TOPICS); do
            topic_id="t$topic"
            message_ids=$(shuf -i 1-$MSG_ID_RANGE -n $NUM_MESSAGES)
            for message_id in $message_ids; do
              shard_id=$((RANDOM % NUM_SHARDS + 1))
              tuples+=("$topic_id,$shard_id,$message_id")
            done
          done
          echo "Generated ${#tuples[@]} tuples."
          
          echo "Inserting into schema1 (composite PK)..."
          start_time=$(date +%s%3N)
          echo "Inserting into schema1..."
          for tuple in "${tuples[@]}"; do
            IFS=',' read topic_id shard_id message_id <<< "$tuple"
            echo "INSERT INTO schema1 VALUES ('$topic_id', $shard_id, $message_id, 'hello');"
          done | $PSQL > /dev/null
          end_time=$(date +%s%3N)
          
          echo -e "\033[0;32mSchema1 insert time: $((end_time - start_time)) milliseconds\033[0m"

          echo "Inserting into schema2 (separate index)..."
          start_time=$(date +%s%3N)
          echo "Inserting into schema2..."
          for tuple in "${tuples[@]}"; do
            IFS=',' read topic_id shard_id message_id <<< "$tuple"
            echo "INSERT INTO schema2 VALUES ('$topic_id', $message_id, $shard_id, 'hello');"
          done | $PSQL > /dev/null
          end_time=$(date +%s%3N)
          echo -e "\033[0;32mSchema2 insert time: $((end_time - start_time)) milliseconds\033[0m"

          echo "Benchmarking shard_id filter on schema1 (composite PK)..."
          start=$(date +%s%3N)
          $PSQL -c "SELECT COUNT(*) FROM schema1 WHERE shard_id = 5;" > /dev/null
          end=$(date +%s%3N)
          echo -e "\033[0;32mschema1 shard_id filter time: $((end - start)) ms\033[0m"
          
          echo "Benchmarking full table scan on schema1..."
          start=$(date +%s%3N)
          $PSQL -c "SELECT COUNT(*) FROM schema1;" > /dev/null
          end=$(date +%s%3N)
          echo -e "\033[0;32mschema1 full table scan time: $((end - start)) ms\033[0m"
          
          echo "Benchmarking shard_id filter on schema2 (with index)..."
          start=$(date +%s%3N)
          $PSQL -c "SELECT COUNT(*) FROM schema2 WHERE shard_id = 5;" > /dev/null
          end=$(date +%s%3N)
          echo -e "\033[0;32mschema2 shard_id filter time: $((end - start)) ms\033[0m"
          
          echo "Benchmarking full table scan on schema2..."
          start=$(date +%s%3N)
          $PSQL -c "SELECT COUNT(*) FROM schema2;" > /dev/null
          end=$(date +%s%3N)
          echo -e "\033[0;32mschema2 full table scan time: $((end - start)) ms\033[0m"
          
          echo "=== Index Storage Size ==="
          echo -e "\033[0;32mSchema1 index size:\033[0m"
          $PSQL -c "SELECT pg_size_pretty(pg_indexes_size('schema1')) AS schema1_index_size;"
          
          echo -e "\033[0;32mSchema2 index size:\033[0m"
          $PSQL -c "SELECT pg_size_pretty(pg_indexes_size('schema2')) AS schema2_index_size;"

          # Extract the first tuple from the precomputed list
          first_tuple="${tuples[0]}"
          IFS=',' read LOOKUP_TOPIC_ID LOOKUP_SHARD_ID LOOKUP_MESSAGE_ID <<< "$first_tuple"          
          echo "Using lookup key: ($LOOKUP_TOPIC_ID, $LOOKUP_MESSAGE_ID)"
          
          echo "Benchmarking lookup by (topic_id, message_id) on schema1..."
          start=$(date +%s%3N)
          $PSQL -c "SELECT * FROM schema1 WHERE topic_id = '$LOOKUP_TOPIC_ID' AND message_id = $LOOKUP_MESSAGE_ID;" > /dev/null
          end=$(date +%s%3N)
          echo -e "\033[0;32mschema1 topic_id + message_id lookup time: $((end - start)) ms\033[0m"
          
          echo "Benchmarking lookup by (topic_id, message_id) on schema2..."
          start=$(date +%s%3N)
          $PSQL -c "SELECT * FROM schema2 WHERE topic_id = '$LOOKUP_TOPIC_ID' AND message_id = $LOOKUP_MESSAGE_ID;" > /dev/null
          end=$(date +%s%3N)
          echo -e "\033[0;32mschema2 topic_id + message_id lookup time: $((end - start)) ms\033[0m"

