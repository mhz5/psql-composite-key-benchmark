name: Postgres Schema Benchmark

on:
  push:
    branches: main

jobs:
  benchmark:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do sleep 1; done

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Run performance test
        run: |
          PSQL="psql -h localhost -U test -d testdb -w"
          export PGPASSWORD=test

          echo "Creating schemas..."
          $PSQL <<SQL
          DROP TABLE IF EXISTS schema1;
          DROP TABLE IF EXISTS schema2;

          CREATE TABLE schema1 (
            topic_id TEXT,
            shard_id INT,
            message_id INT,
            content TEXT,
            PRIMARY KEY (topic_id, shard_id, message_id)
          );

          CREATE TABLE schema2 (
            topic_id TEXT,
            message_id INT,
            shard_id INT,
            content TEXT,
            PRIMARY KEY (topic_id, message_id)
          );

          CREATE INDEX idx_schema2_shard ON schema2(shard_id);
          SQL
          
          echo "Populating tables..."
          # Common configuration
          NUM_TOPICS=300
          NUM_SHARDS=98
          NUM_MESSAGES=1000
          MSG_ID_RANGE=10000000
          
          declare -a tuples=()
          
          echo "Generating all (topic_id, shard_id, message_id) tuples..."
          for topic in $(seq 1 $NUM_TOPICS); do
            topic_id="t$topic"
            message_ids=$(shuf -i 1-$MSG_ID_RANGE -n $NUM_MESSAGES)
            for message_id in $message_ids; do
              shard_id=$((RANDOM % NUM_SHARDS + 1))
              tuples+=("$topic_id,$shard_id,$message_id")
            done
          done
          echo "Generated ${#tuples[@]} tuples."

          # Benchmarking functions
          benchmark_insert() {
            local schema=$1
            local insert_fn=$2
            echo "Inserting into $schema..."
            start_time=$(date +%s%3N)
            for tuple in "${tuples[@]}"; do
              IFS=',' read topic_id shard_id message_id <<< "$tuple"
              echo "$($insert_fn "$topic_id" "$shard_id" "$message_id")"
            done | $PSQL > /dev/null
            end_time=$(date +%s%3N)
            echo -e "\033[0;32m$schema insert time: $((end_time - start_time)) milliseconds\033[0m"
          }
          
          benchmark_shard_filter_all() {
            local schema=$1
            echo -e "\033[0;32mBenchmarking shard_id filter on $schema for all shard IDs...\033[0m"
            start=$(date +%s%3N)
            for shard_id in $(seq 1 $NUM_SHARDS); do
              $PSQL -c "SELECT COUNT(*) FROM $schema WHERE shard_id = $shard_id;" > /dev/null
            done
            end=$(date +%s%3N)
            echo -e "\033[0;32m$schema shard_id filter time: $((end - start)) ms\033[0m"
          }
          
          benchmark_full_table_scan() {
            local schema=$1
            echo -e "\033[0;32mBenchmarking full table scan on $schema...\033[0m"
            start=$(date +%s%3N)
            $PSQL -c "SELECT COUNT(*) FROM $schema;" > /dev/null
            end=$(date +%s%3N)
            echo -e "\033[0;32m$schema full table scan time: $((end - start)) ms\033[0m"
          }
                    
          benchmark_batch_lookups() {
            local schema=$1
            echo -e "\033[0;32mBenchmarking 1000 lookups by (topic_id, message_id) on $schema...\033[0m"
            start=$(date +%s%3N)
            for tuple in "${tuples[@]:0:1000}"; do
              IFS=',' read topic_id shard_id message_id <<< "$tuple"
              $PSQL -c "SELECT * FROM $schema WHERE topic_id = '$topic_id' AND message_id = $message_id;" > /dev/null
            done
            end=$(date +%s%3N)
            echo -e "\033[0;32m$schema topic_id + message_id lookup time (1000 lookups): $((end - start)) ms\033[0m"
          }
          
          print_index_size() {
            local schema=$1
            echo -e "\033[0;32m$schema index size:\033[0m"
            $PSQL -c "SELECT pg_size_pretty(pg_indexes_size('$schema')) AS ${schema}_index_size;"
          }
          
          # Insert statement generators
          insert_schema1() {
            echo "INSERT INTO schema1 VALUES ('$1', $2, $3, 'hello');"
          }
          insert_schema2() {
            echo "INSERT INTO schema2 VALUES ('$1', $3, $2, 'hello');"
          }
          
          # === Run benchmarks ===
          benchmark_insert "schema1 (topic:shard:msg composite key)" insert_schema1
          benchmark_insert "schema2 (topic:msg composite key, separate shard index)" insert_schema2
          
          benchmark_shard_filter_all "schema1"
          benchmark_shard_filter_all "schema2"
          
          benchmark_full_table_scan "schema1"
          benchmark_full_table_scan "schema2"
          
          print_index_size "schema1"
          print_index_size "schema2"
                    
          benchmark_batch_lookups "schema1"
          benchmark_batch_lookups "schema2"
